recs.third_party_share = ifelse(recs.third_party_share == 1, "Yes", "No"),
recs.encrypt_ohip_link = ifelse(recs.encrypt_ohip_link == 1, "Yes", "No"),
recs.other_methods_link = ifelse(recs.other_methods_link == 1, "Yes", "No"))
err$recs.mod_did_ohip <- str_replace_all(err$recs.mod_did_ohip, "encrypted_ohip", "Yes")
err$recs.mod_did_ohip <- str_replace_all(err$recs.mod_did_ohip, "no_ohip", "No")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "age", "Age")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "full_dob", "Full DOB")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "no_dob", "No")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "3dig_postcd", "First 3 digits")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "full_postcd", "Full PC")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "no_postcd", "No")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "deface", "Deface")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "full_face", "Full Face")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "no_img", "Imaging not collected")
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 0] <-
"Incomplete"
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 1] <-
"Unverified"
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 2] <-
"Complete"
err[,11:(ncol(err)-4)][!is.na(err[,11:(ncol(err)-4)])] <- "Yes"
err[,11:(ncol(err)-4)][is.na(err[,11:(ncol(err)-4)])] <- ""
err$recs.reb_expiry_date <- as.character(err$recs.reb_expiry_date)
err$Review <- NA
templatename <- paste(tolower(prog), "template.xlsx", sep = "")
template <- loadWorkbook(templatename)
xlerr = readWorksheet(template, sheet = getSheets(template)[1])
for(i in 1:nrow(err)){
colcount <- 1
for(j in names(xlerr)){
xlerr[i,j] <- err[i,colcount]
colcount <- colcount + 1
}
}
xlerr$Col3 <- as.integer(xlerr$Col3)
xlerr$Col5 <- as.Date(xlerr$Col5, format = "%Y-%m-%d")
xlerr$Col5 <- format(xlerr$Col5, "%d/%m/%Y")
writeWorksheet(template, xlerr, sheet = getSheets(template)[1], startRow = 3, header = F)
today <- toupper(format(Sys.Date(), "%d%h%Y"))
errname <- paste(prog, "_ERR_", today, ".xlsx", sep = "")
saveWorkbook(template, errname)
# errfile <- loadWorkbook("errcpn.xlsx", create = TRUE)
# createSheet(errfile, "Sheet1")
# writeWorksheet(errfile, err, sheet = "Sheet1")
# saveWorkbook(errfile)
# err$recs.site_rstrcn_bru[!is.na(err$recs.site_rstrcn_bru)] <- "Yes"
# err$recs.site_rstrcn_bru <- str_replace_all(err$recs.site_rstrcn_bru, !is.na(err$recs.site_rstrcn_bru), "Imaging not collected")
# a <- gsub(!is.na(err$recs.site_rstrcn_hbk), "Yes", err$recs.site_rstrcn_hbk)
#
# err <-
#   err %>%
#   mutate(err[,11:48] = ifelse(is.na(err[,11:48]), "", "Yes"))
#
# err[,11:48][!is.na(err[,11:48])] <- 0
#
#
# err %>% replace_na(list(err[11:48], ""))
#
#
# err$recs.mod_did_ohip[err$recs.mod_did_ohip == "encrypted_ohip"] <- "Yes"
#
# err[err[,c(4,6)] == 1]
#
# err[c(err$recs.reb_aprvl_rcvd, err$recs.reb_bc_transfer_approval, err$recs.third_party_share) == 1]
#
# mutate(err, err$recs.reb_aprvl_rcvd = ifelse(err$recs.reb_aprvl_rcvd == 1, "Yes", "No"))
str(sites)
names(deidsites)
cbind(names(sites), names(deidsites))
names(deidsites)
library(redcapAPI)
redcap_api_url = "https://redcap.braincode.ca/api/"
token = "2F15DD1A28FA0DA0710F0D49D0257D03"
rcon <- redcapConnection(redcap_api_url, token)
ethics <- exportRecords(rcon, factors = FALSE, labels = FALSE)
prog <- "CPN"
#ethics restriction report
library(XLConnect)
library(Hmisc)
library(dplyr)
library(stringr)
library(tidyr)
#report <- exportReports(rcon, report_id = "CP-NET Ethics Restriction Report", checkboxLabels = FALSE)
recs <- ethics[which(ethics$program == prog),]
#template <- read.csv("BrainCODEEthicsTrack_DATA_2018-04-17_1035.csv")
recs[,116:163] %>%
select_if(function(x) any(!is.na(x))) -> sites
recs[,166:213] %>%
select_if(function(x) any(!is.na(x))) -> deidsites
err <- data.frame(recs$record_id,
recs$study_title,
recs$study_code,
recs$reb_aprvl_rcvd,
recs$reb_expiry_date,
recs$reb_bc_transfer_approval,
recs$mod_did_ohip,
recs$mod_did_dob,
recs$mod_did_postcd,
recs$mod_did_face,
sites,
deidsites,
recs$third_party_share,
recs$encrypt_ohip_link,
recs$other_methods_link,
recs$braincode_study_tracking_sheet_data_transfer_form_complete,
stringsAsFactors = FALSE)
# label(err$recs.recs.record_id)="Record ID"
# label(err$recs.recs.study_title)="Study Title"
# label(err$recs.recs.study_code)="Brain-CODE Study Code"
# label(err$recs.reb_aprvl_rcvd)="Has OBI received all REB approval letters"
# label(err$recs.reb_expiry_date)="REB Expiry Date (based on the most recent renewal)"
# label(err$recs.reb_bc_transfer_approval)="Does REB approval allow transfer err to Brain-CODE?"
# label(err$recs.mod_did_ohip)="Is encrypted Health Insurance Number permitted?"
# label(err$recs.mod_did_dob)="Date of Birth modification"
# label(err$recs.mod_did_postcd)="What modification to postal code are premitted?"
# label(err$recs.mod_did_face)="What modification to full face images are premitted?"
# label(err$recs.site_rstrcn_hbk)=""
# label(err$recs.site_rstrcn_mch)=""
# label(err$recs.site_rstrcn_tvc)=""
# label(err$recs.site_rstrcn_hsc)=""
# label(err$recs.site_rstrcn_byc)=""
# label(err$recs.site_rstrcn_cho)=""
# label(err$recs.site_rstrcn_eok)=""
# label(err$recs.site_rstrcn_gcc)=""
# label(err$recs.site_rstrcn_hsn)=""
# label(err$recs.site_rstrcn_hdh)=""
# label(err$recs.site_rstrcn_twh)=""
# label(err$recs.site_rstrcn_mcu)=""
# label(err$recs.site_rstrcn_qns)=""
# label(err$recs.site_rstrcn_uot)=""
# label(err$recs.site_rstrcn_weu)=""
# label(err$recs.site_rstrcn_occ)=""
# label(err$recs.site_rstrcn_lhr)=""
# label(err$recs.site_rstrcn_ctn)=""
# label(err$recs.site_rstrcn_bru)=""
# label(err$recs.site_rstrcn_msh)=""
# label(err$recs.site_rstrcn_hbk_deid)=""
# label(err$recs.site_rstrcn_mch_deid)=""
# label(err$recs.site_rstrcn_tvc_deid)=""
# label(err$recs.site_rstrcn_hsc_deid)=""
# label(err$recs.site_rstrcn_byc_deid)=""
# label(err$recs.site_rstrcn_cho_deid)=""
# label(err$recs.site_rstrcn_eok_deid)=""
# label(err$recs.site_rstrcn_gcc_deid)=""
# label(err$recs.site_rstrcn_hsn_deid)=""
# label(err$recs.site_rstrcn_hdh_deid)=""
# label(err$recs.site_rstrcn_twh_deid)=""
# label(err$recs.site_rstrcn_mcu_deid)=""
# label(err$recs.site_rstrcn_qns_deid)=""
# label(err$recs.site_rstrcn_uot_deid)=""
# label(err$recs.site_rstrcn_weu_deid)=""
# label(err$recs.site_rstrcn_occ_deid)=""
# label(err$recs.site_rstrcn_lhr_deid)=""
# label(err$recs.site_rstrcn_ctn_deid)=""
# label(err$recs.third_party_share)="Can Brain-CODE share deidentified err with  third parties?"
# label(err$recs.encrypt_ohip_link)="Can the err collected be linked to external err sources using encrypted OHIP?"
# label(err$recs.other_methods_link)="Can the err collected be linked to external err sources using other methods? (This includes matching on pre-defined identifiers, probabilistic matching, and other available methods)"
# #label(err$recs.braincode_study_tracking_sheet_err_transfer_form_complete)="Complete?"
err <-
err %>%
mutate(recs.reb_aprvl_rcvd = ifelse(err$recs.reb_aprvl_rcvd == 1, "Yes", "No"),
recs.reb_bc_transfer_approval = ifelse(recs.reb_bc_transfer_approval == 1, "Yes", "No"),
recs.third_party_share = ifelse(recs.third_party_share == 1, "Yes", "No"),
recs.encrypt_ohip_link = ifelse(recs.encrypt_ohip_link == 1, "Yes", "No"),
recs.other_methods_link = ifelse(recs.other_methods_link == 1, "Yes", "No"))
err$recs.mod_did_ohip <- str_replace_all(err$recs.mod_did_ohip, "encrypted_ohip", "Yes")
err$recs.mod_did_ohip <- str_replace_all(err$recs.mod_did_ohip, "no_ohip", "No")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "age", "Age")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "full_dob", "Full DOB")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "no_dob", "No")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "3dig_postcd", "First 3 digits")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "full_postcd", "Full PC")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "no_postcd", "No")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "deface", "Deface")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "full_face", "Full Face")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "no_img", "Imaging not collected")
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 0] <-
"Incomplete"
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 1] <-
"Unverified"
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 2] <-
"Complete"
err[,11:(ncol(err)-4)][!is.na(err[,11:(ncol(err)-4)])] <- "Yes"
err[,11:(ncol(err)-4)][is.na(err[,11:(ncol(err)-4)])] <- ""
err$recs.reb_expiry_date <- as.character(err$recs.reb_expiry_date)
err$Review <- NA
templatename <- paste(tolower(prog), "template.xlsx", sep = "")
template <- loadWorkbook(templatename)
xlerr = readWorksheet(template, sheet = getSheets(template)[1])
for(i in 1:nrow(err)){
colcount <- 1
for(j in names(xlerr)){
xlerr[i,j] <- err[i,colcount]
colcount <- colcount + 1
}
}
xlerr$Col3 <- as.integer(xlerr$Col3)
xlerr$Col5 <- as.Date(xlerr$Col5, format = "%Y-%m-%d")
xlerr$Col5 <- format(xlerr$Col5, "%d/%m/%Y")
writeWorksheet(template, xlerr, sheet = getSheets(template)[1], startRow = 3, header = F)
today <- toupper(format(Sys.Date(), "%d%h%Y"))
errname <- paste(prog, "_ERR_", today, ".xlsx", sep = "")
saveWorkbook(template, errname)
# errfile <- loadWorkbook("errcpn.xlsx", create = TRUE)
# createSheet(errfile, "Sheet1")
# writeWorksheet(errfile, err, sheet = "Sheet1")
# saveWorkbook(errfile)
# err$recs.site_rstrcn_bru[!is.na(err$recs.site_rstrcn_bru)] <- "Yes"
# err$recs.site_rstrcn_bru <- str_replace_all(err$recs.site_rstrcn_bru, !is.na(err$recs.site_rstrcn_bru), "Imaging not collected")
# a <- gsub(!is.na(err$recs.site_rstrcn_hbk), "Yes", err$recs.site_rstrcn_hbk)
#
# err <-
#   err %>%
#   mutate(err[,11:48] = ifelse(is.na(err[,11:48]), "", "Yes"))
#
# err[,11:48][!is.na(err[,11:48])] <- 0
#
#
# err %>% replace_na(list(err[11:48], ""))
#
#
# err$recs.mod_did_ohip[err$recs.mod_did_ohip == "encrypted_ohip"] <- "Yes"
#
# err[err[,c(4,6)] == 1]
#
# err[c(err$recs.reb_aprvl_rcvd, err$recs.reb_bc_transfer_approval, err$recs.third_party_share) == 1]
#
# mutate(err, err$recs.reb_aprvl_rcvd = ifelse(err$recs.reb_aprvl_rcvd == 1, "Yes", "No"))
library(redcapAPI)
redcap_api_url = "https://redcap.braincode.ca/api/"
token = "2F15DD1A28FA0DA0710F0D49D0257D03"
rcon <- redcapConnection(redcap_api_url, token)
ethics <- exportRecords(rcon, factors = FALSE, labels = FALSE)
prog <- "EPL"
#ethics restriction report
library(XLConnect)
library(Hmisc)
library(dplyr)
library(stringr)
library(tidyr)
recs <- ethics[which(ethics$program == prog),]
err <- data.frame(recs$record_id,
recs$study_title,
recs$study_code,
recs$reb_aprvl_rcvd,
recs$reb_expiry_date,
recs$reb_bc_transfer_approval,
recs$mod_did_ohip,
recs$mod_did_dob,
recs$mod_did_postcd,
recs$mod_did_face,
recs$site_rstrcn_hsc,
recs$site_rstrcn_uto,
recs$site_rstrcn_tgh,
recs$site_rstrcn_twh,
recs$site_rstrcn_lhr,
recs$site_rstrcn_lhs,
recs$site_rstrcn_cho,
recs$site_rstrcn_mcu,
recs$site_rstrcn_mch,
recs$site_rstrcn_hhs,
recs$site_rstrcn_hgh,
recs$site_rstrcn_weu,
recs$site_rstrcn_hsc_deid,
recs$site_rstrcn_uto_deid,
recs$site_rstrcn_tgh_deid,
recs$site_rstrcn_twh_deid,
recs$site_rstrcn_lhr_deid,
recs$site_rstrcn_lhs_deid,
recs$site_rstrcn_cho_deid,
recs$site_rstrcn_mcu_deid,
recs$site_rstrcn_mch_deid,
recs$site_rstrcn_hhs_deid,
recs$site_rstrcn_hgh_deid,
recs$site_rstrcn_weu_deid,
recs$third_party_share,
recs$encrypt_ohip_link,
recs$other_methods_link,
recs$braincode_study_tracking_sheet_data_transfer_form_complete,
stringsAsFactors = FALSE)
err <-
err %>%
mutate(recs.reb_aprvl_rcvd = ifelse(err$recs.reb_aprvl_rcvd == 1, "Yes", "No"),
recs.reb_bc_transfer_approval = ifelse(recs.reb_bc_transfer_approval == 1, "Yes", "No"),
recs.third_party_share = ifelse(recs.third_party_share == 1, "Yes", "No"),
recs.encrypt_ohip_link = ifelse(recs.encrypt_ohip_link == 1, "Yes", "No"),
recs.other_methods_link = ifelse(recs.other_methods_link == 1, "Yes", "No"))
err$recs.mod_did_ohip <- str_replace_all(err$recs.mod_did_ohip, "encrypted_ohip", "Yes")
err$recs.mod_did_ohip <- str_replace_all(err$recs.mod_did_ohip, "no_ohip", "No")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "age", "Age")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "full_dob", "Full DOB")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "no_dob", "No")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "3dig_postcd", "First 3 digits")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "full_postcd", "Full PC")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "no_postcd", "No")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "deface", "Deface")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "full_face", "Full Face")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "no_img", "Imaging not collected")
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 0] <-
"Incomplete"
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 1] <-
"Unverified"
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 2] <-
"Complete"
err[,11:(ncol(err)-4)][!is.na(err[,11:(ncol(err)-4)])] <- "Yes"
err[,11:(ncol(err)-4)][is.na(err[,11:(ncol(err)-4)])] <- ""
err$recs.reb_expiry_date <- as.character(err$recs.reb_expiry_date)
template <- loadWorkbook("epltemplate.xlsx")
xlerr = readWorksheet(template, sheet = getSheets(template)[1])
for(i in 1:nrow(err)){
colcount <- 1
for(j in names(xlerr)){
xlerr[i,j] <- err[i,colcount]
colcount <- colcount + 1
}
}
xlerr$Col3 <- as.integer(xlerr$Col3)
xlerr$Col5 <- as.Date(xlerr$Col5, format = "%Y-%m-%d")
xlerr$Col5 <- format(xlerr$Col5, "%d/%m/%Y")
writeWorksheet(template, xlerr, sheet = getSheets(template)[1], startRow = 3, header = F)
today <- toupper(format(Sys.Date(), "%d%h%Y"))
errname <- paste(prog, "_ERR_", today, ".xlsx", sep = "")
saveWorkbook(template, errname)
library(redcapAPI)
redcap_api_url = "https://redcap.braincode.ca/api/"
token = "2F15DD1A28FA0DA0710F0D49D0257D03"
rcon <- redcapConnection(redcap_api_url, token)
ethics <- exportRecords(rcon, factors = FALSE, labels = FALSE)
prog <- "CBN"
#ethics restriction report
library(XLConnect)
library(Hmisc)
library(dplyr)
library(stringr)
library(tidyr)
#report <- exportReports(rcon, report_id = "CP-NET Ethics Restriction Report", checkboxLabels = FALSE)
recs <- ethics[which(ethics$program == prog),]
#template <- read.csv("BrainCODEEthicsTrack_DATA_2018-04-17_1035.csv")
recs[,116:163] %>%
select_if(function(x) any(!is.na(x))) -> sites
recs[,166:213] %>%
select_if(function(x) any(!is.na(x))) -> deidsites
err <- data.frame(recs$record_id,
recs$study_title,
recs$study_code,
recs$reb_aprvl_rcvd,
recs$reb_expiry_date,
recs$reb_bc_transfer_approval,
recs$mod_did_ohip,
recs$mod_did_dob,
recs$mod_did_postcd,
recs$mod_did_face,
sites,
deidsites,
recs$third_party_share,
recs$encrypt_ohip_link,
recs$other_methods_link,
recs$braincode_study_tracking_sheet_data_transfer_form_complete,
stringsAsFactors = FALSE)
err <-
err %>%
mutate(recs.reb_aprvl_rcvd = ifelse(err$recs.reb_aprvl_rcvd == 1, "Yes", "No"),
recs.reb_bc_transfer_approval = ifelse(recs.reb_bc_transfer_approval == 1, "Yes", "No"),
recs.third_party_share = ifelse(recs.third_party_share == 1, "Yes", "No"),
recs.encrypt_ohip_link = ifelse(recs.encrypt_ohip_link == 1, "Yes", "No"),
recs.other_methods_link = ifelse(recs.other_methods_link == 1, "Yes", "No"))
err$recs.mod_did_ohip <- str_replace_all(err$recs.mod_did_ohip, "encrypted_ohip", "Yes")
err$recs.mod_did_ohip <- str_replace_all(err$recs.mod_did_ohip, "no_ohip", "No")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "age", "Age")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "full_dob", "Full DOB")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "no_dob", "No")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "3dig_postcd", "First 3 digits")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "full_postcd", "Full PC")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "no_postcd", "No")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "deface", "Deface")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "full_face", "Full Face")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "no_img", "Imaging not collected")
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 0] <-
"Incomplete"
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 1] <-
"Unverified"
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 2] <-
"Complete"
err[,11:(ncol(err)-4)][!is.na(err[,11:(ncol(err)-4)])] <- "Yes"
err[,11:(ncol(err)-4)][is.na(err[,11:(ncol(err)-4)])] <- ""
err$recs.reb_expiry_date <- as.character(err$recs.reb_expiry_date)
err$Review <- NA
templatename <- paste(tolower(prog), "template.xlsx", sep = "")
template <- loadWorkbook(templatename)
xlerr = readWorksheet(template, sheet = getSheets(template)[1])
for(i in 1:nrow(err)){
colcount <- 1
for(j in names(xlerr)){
xlerr[i,j] <- err[i,colcount]
colcount <- colcount + 1
}
}
xlerr$Col3 <- as.integer(xlerr$Col3)
xlerr$Col5 <- as.Date(xlerr$Col5, format = "%Y-%m-%d")
xlerr$Col5 <- format(xlerr$Col5, "%d/%m/%Y")
writeWorksheet(template, xlerr, sheet = getSheets(template)[1], startRow = 3, header = F)
today <- toupper(format(Sys.Date(), "%d%h%Y"))
errname <- paste(prog, "_ERR_", today, ".xlsx", sep = "")
saveWorkbook(template, errname)
sites
names(sites)
templatename
?copy_to
?clipboard
writeClipboard(sites, 1)
writeClipboard(as.character(sites), 1)
library(clipr)
write_clip(sites)
write_clip(deidsites)
names(recs)
write_clip(deidsites)
library(redcapAPI)
redcap_api_url = "https://redcap.braincode.ca/api/"
token = "2F15DD1A28FA0DA0710F0D49D0257D03"
rcon <- redcapConnection(redcap_api_url, token)
ethics <- exportRecords(rcon, factors = FALSE, labels = FALSE)
prog <- "CBN"
#ethics restriction report
library(XLConnect)
library(Hmisc)
library(dplyr)
library(stringr)
library(tidyr)
library(clipr)
#report <- exportReports(rcon, report_id = "CP-NET Ethics Restriction Report", checkboxLabels = FALSE)
recs <- ethics[which(ethics$program == prog),]
#template <- read.csv("BrainCODEEthicsTrack_DATA_2018-04-17_1035.csv")
recs[,116:163] %>%
select_if(function(x) any(!is.na(x))) -> sites
#if sites have changed, current site list can be copied to clipboard and inserted into template document
#write_clip(sites)
#write_clip(deidsites)
recs[,166:213] %>%
select_if(function(x) any(!is.na(x))) -> deidsites
err <- data.frame(recs$record_id,
recs$study_title,
recs$study_code,
recs$reb_aprvl_rcvd,
recs$reb_expiry_date,
recs$reb_bc_transfer_approval,
recs$mod_did_ohip,
recs$mod_did_dob,
recs$mod_did_postcd,
recs$mod_did_face,
sites,
deidsites,
recs$third_party_share,
recs$encrypt_ohip_link,
recs$other_methods_link,
recs$braincode_study_tracking_sheet_data_transfer_form_complete,
stringsAsFactors = FALSE)
err <-
err %>%
mutate(recs.reb_aprvl_rcvd = ifelse(err$recs.reb_aprvl_rcvd == 1, "Yes", "No"),
recs.reb_bc_transfer_approval = ifelse(recs.reb_bc_transfer_approval == 1, "Yes", "No"),
recs.third_party_share = ifelse(recs.third_party_share == 1, "Yes", "No"),
recs.encrypt_ohip_link = ifelse(recs.encrypt_ohip_link == 1, "Yes", "No"),
recs.other_methods_link = ifelse(recs.other_methods_link == 1, "Yes", "No"))
err$recs.mod_did_ohip <- str_replace_all(err$recs.mod_did_ohip, "encrypted_ohip", "Yes")
err$recs.mod_did_ohip <- str_replace_all(err$recs.mod_did_ohip, "no_ohip", "No")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "age", "Age")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "full_dob", "Full DOB")
err$recs.mod_did_dob <- str_replace_all(err$recs.mod_did_dob, "no_dob", "No")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "3dig_postcd", "First 3 digits")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "full_postcd", "Full PC")
err$recs.mod_did_postcd <- str_replace_all(err$recs.mod_did_postcd, "no_postcd", "No")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "deface", "Deface")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "full_face", "Full Face")
err$recs.mod_did_face <- str_replace_all(err$recs.mod_did_face, "no_img", "Imaging not collected")
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 0] <-
"Incomplete"
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 1] <-
"Unverified"
err$recs.braincode_study_tracking_sheet_data_transfer_form_complete[err$recs.braincode_study_tracking_sheet_data_transfer_form_complete == 2] <-
"Complete"
err[,11:(ncol(err)-4)][!is.na(err[,11:(ncol(err)-4)])] <- "Yes"
err[,11:(ncol(err)-4)][is.na(err[,11:(ncol(err)-4)])] <- ""
err$recs.reb_expiry_date <- as.character(err$recs.reb_expiry_date)
err$Review <- NA
templatename <- paste(tolower(prog), "template.xlsx", sep = "")
template <- loadWorkbook(templatename)
xlerr = readWorksheet(template, sheet = getSheets(template)[1])
for(i in 1:nrow(err)){
colcount <- 1
for(j in names(xlerr)){
xlerr[i,j] <- err[i,colcount]
colcount <- colcount + 1
}
}
xlerr$Col3 <- as.integer(xlerr$Col3)
xlerr$Col5 <- as.Date(xlerr$Col5, format = "%Y-%m-%d")
xlerr$Col5 <- format(xlerr$Col5, "%d/%m/%Y")
writeWorksheet(template, xlerr, sheet = getSheets(template)[1], startRow = 3, header = F)
today <- toupper(format(Sys.Date(), "%d%h%Y"))
errname <- paste(prog, "_ERR_", today, ".xlsx", sep = "")
saveWorkbook(template, errname)
library(keras)
install.packages("keras")
install_tensorflow()
library(keras)
install_tensorflow()
install_keras()
install_keras()
install_tensorflow()
mnist <- dataset_mnist()
library(keras)
install_keras()
